{"version":3,"sources":["helpers/fake-backend.ts","config.ts","helpers/api/apiCore.ts","helpers/api/auth.ts","peticion.js","App.tsx","reportWebVitals.ts","i18n.ts","redux/auth/constants.ts","redux/auth/reducers.ts","redux/layout/constants.ts","constants/layout.ts","utils/array.ts","utils/layout.ts","redux/layout/reducers.ts","redux/reducers.ts","redux/auth/actions.ts","redux/auth/saga.ts","redux/layout/saga.ts","redux/sagas.ts","redux/store.ts","index.tsx"],"names":["mock","MockAdapter","axios","config","API_URL","process","REACT_APP_API_URL","defaults","headers","post","baseURL","interceptors","response","use","error","message","status","data","Promise","reject","window","location","href","AUTH_SESSION_KEY","setAuthorization","token","common","getUserFromCookie","user","sessionStorage","getItem","JSON","parse","APICore","get","url","params","queryString","Object","keys","map","key","join","getFile","responseType","getMultiple","urls","reqs","push","all","create","updatePatch","patch","update","put","delete","createWithFile","formData","FormData","k","append","updateWithFile","isUserAuthenticated","getLoggedInUser","decoded","jwtDecode","currentTime","Date","now","exp","console","warn","setLoggedInUser","session","setItem","stringify","removeItem","setUserInSession","modifiedUser","userInfo","api","login","logout","signup","forgotPassword","Mensaje","myHeaders","Headers","raw","fetch","mode","method","body","redirect","then","text","result","log","catch","users","id","email","username","password","firstName","lastName","role","onPost","reply","resolve","setTimeout","filteredUsers","filter","length","fullname","split","newUser","configureFakeBackend","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","resources","es","translation","i18n","detector","initReactI18next","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","AuthActionTypes","LayoutActionTypes","LayoutTypes","LayoutWidth","MenuPositions","SideBarTheme","SideBarTypes","TopbarTheme","INIT_STATE","loading","Auth","state","action","type","API_RESPONSE_SUCCESS","payload","actionType","LOGIN_USER","userLoggedIn","SIGNUP_USER","userSignUp","LOGOUT_USER","userLogout","FORGOT_PASSWORD","resetPasswordSuccess","passwordReset","API_RESPONSE_ERROR","registerError","RESET","passwordChange","getLayoutConfigs","layoutWidth","leftSideBarType","LEFT_SIDEBAR_TYPE_DEFAULT","LAYOUT_WIDTH_FLUID","LAYOUT_WIDTH_BOXED","LEFT_SIDEBAR_TYPE_CONDENSED","layoutType","LAYOUT_VERTICAL","menuPosition","MENU_POSITION_FIXED","leftSideBarTheme","LEFT_SIDEBAR_THEME_DARK","showSidebarUserInfo","topbarTheme","TOPBAR_THEME_LIGHT","isOpenRightSideBar","Layout","CHANGE_LAYOUT","CHANGE_LAYOUT_WIDTH","layoutConfig","CHANGE_MENU_POSITIONS","CHANGE_SIDEBAR_THEME","CHANGE_SIDEBAR_TYPE","TOGGLE_SIDEBAR_USER_INFO","CHANGE_TOPBAR_THEME","SHOW_RIGHT_SIDEBAR","HIDE_RIGHT_SIDEBAR","combineReducers","authApiResponseSuccess","authApiResponseError","watchLoginUser","watchLogout","watchSignup","watchForgotPassword","authSaga","call","loginApi","logoutApi","signupApi","forgotPasswordApi","takeEvery","fork","showRightSidebar","hideRightSidebar","watchShowRightSidebar","watchHideRightSidebar","LayoutSaga","manageBodyClass","cssClass","document","classList","add","remove","toggle","rootSaga","layoutSaga","sagaMiddleware","createSagaMiddleware","middlewares","ReactDOM","render","store","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","localstore","createStore","reducers","applyMiddleware","run","configureStore","getElementById"],"mappings":"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","file":"static/js/main.b621a1b8.chunk.js","sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\ninterface UserData {\n    id: number;\n    email?: string;\n    username: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n    token: string;\n}\n\nvar mock = new MockAdapter(axios);\n\nexport function configureFakeBackend() {\n    let users: UserData[] = [\n        {\n            id: 1,\n            email: 'minton@coderthemes.com',\n            username: 'test',\n            password: 'test',\n            firstName: 'Test',\n            lastName: 'User',\n            role: 'Admin',\n            token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI',\n        },\n    ];\n\n    mock.onPost('/login/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // find if any user matches login credentials\n                let filteredUsers = users.filter((user) => {\n                    return user.email === params.email && user.password === params.password;\n                });\n\n                if (filteredUsers.length) {\n                    // if login details are valid return user details and fake jwt token\n                    let user = filteredUsers[0];\n                    resolve([200, user]);\n                } else {\n                    // else return error\n                    resolve([401, { message: 'Username or password is incorrect' }]);\n                }\n            }, 1000);\n        });\n    });\n\n    mock.onPost('/register/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // add new users\n                let [firstName, lastName] = params.fullname.split(' ');\n                let newUser: UserData = {\n                    id: users.length + 1,\n                    username: firstName,\n                    password: params.password,\n                    firstName: firstName,\n                    lastName: lastName,\n                    role: 'Admin',\n                    token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI',\n                };\n                users.push(newUser);\n\n                resolve([200, newUser]);\n            }, 1000);\n        });\n    });\n\n    mock.onPost('/forget-password/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // find if any user matches login credentials\n                let filteredUsers = users.filter((user) => {\n                    return user.email === params.email;\n                });\n\n                if (filteredUsers.length) {\n                    // if login details are valid return user details and fake jwt token\n                    let responseJson = {\n                        message: \"We've sent you a link to reset password to your registered email.\",\n                    };\n                    resolve([200, responseJson]);\n                } else {\n                    // else return error\n                    resolve([\n                        401,\n                        {\n                            message: 'Sorry, we could not find any registered user with entered username',\n                        },\n                    ]);\n                }\n            }, 1000);\n        });\n    });\n}\n","const config = {\n    API_URL: process.env.REACT_APP_API_URL,\n};\n\nexport default config;\n","import jwtDecode from 'jwt-decode';\nimport axios from 'axios';\n\nimport config from '../../config';\n\n// content type\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.baseURL = config.API_URL;\n\n// intercepting to capture errors\naxios.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        // Any status codes that falls outside the range of 2xx cause this function to trigger\n        let message;\n\n        if (error && error.response && error.response.status === 404) {\n            // window.location.href = '/not-found';\n        } else if (error && error.response && error.response.status === 403) {\n            window.location.href = '/access-denied';\n        } else {\n            switch (error.response.status) {\n                case 401:\n                    message = 'Invalid credentials';\n                    break;\n                case 403:\n                    message = 'Access Forbidden';\n                    break;\n                case 404:\n                    message = 'Sorry! the data you are looking for could not be found';\n                    break;\n                default: {\n                    message =\n                        error.response && error.response.data ? error.response.data['message'] : error.message || error;\n                }\n            }\n            return Promise.reject(message);\n        }\n    }\n);\n\nconst AUTH_SESSION_KEY = 'minton_user';\n\n/**\n * Sets the default authorization\n * @param {*} token\n */\nconst setAuthorization = (token: string | null) => {\n    if (token) axios.defaults.headers.common['Authorization'] = 'JWT ' + token;\n    else delete axios.defaults.headers.common['Authorization'];\n};\n\nconst getUserFromCookie = () => {\n    const user = sessionStorage.getItem(AUTH_SESSION_KEY);\n    return user ? (typeof user == 'object' ? user : JSON.parse(user)) : null;\n};\nclass APICore {\n    /**\n     * Fetches data from given url\n     */\n    get = (url: string, params: any) => {\n        let response;\n        if (params) {\n            var queryString = params\n                ? Object.keys(params)\n                      .map((key) => key + '=' + params[key])\n                      .join('&')\n                : '';\n            response = axios.get(`${url}?${queryString}`, params);\n        } else {\n            response = axios.get(`${url}`, params);\n        }\n        return response;\n    };\n\n    getFile = (url: string, params: any) => {\n        let response;\n        if (params) {\n            var queryString = params\n                ? Object.keys(params)\n                      .map((key) => key + '=' + params[key])\n                      .join('&')\n                : '';\n            response = axios.get(`${url}?${queryString}`, { responseType: 'blob' });\n        } else {\n            response = axios.get(`${url}`, { responseType: 'blob' });\n        }\n        return response;\n    };\n\n    getMultiple = (urls: string, params: any) => {\n        const reqs = [];\n        let queryString = '';\n        if (params) {\n            queryString = params\n                ? Object.keys(params)\n                      .map((key) => key + '=' + params[key])\n                      .join('&')\n                : '';\n        }\n\n        for (const url of urls) {\n            reqs.push(axios.get(`${url}?${queryString}`));\n        }\n        return axios.all(reqs);\n    };\n\n    /**\n     * post given data to url\n     */\n    create = (url: string, data: any) => {\n        return axios.post(url, data);\n    };\n\n    /**\n     * Updates patch data\n     */\n    updatePatch = (url: string, data: any) => {\n        return axios.patch(url, data);\n    };\n\n    /**\n     * Updates data\n     */\n    update = (url: string, data: any) => {\n        return axios.put(url, data);\n    };\n\n    /**\n     * Deletes data\n     */\n    delete = (url: string) => {\n        return axios.delete(url);\n    };\n\n    /**\n     * post given data to url with file\n     */\n    createWithFile = (url: string, data: any) => {\n        const formData = new FormData();\n        for (const k in data) {\n            formData.append(k, data[k]);\n        }\n\n        const config: any = {\n            headers: {\n                ...axios.defaults.headers,\n                'content-type': 'multipart/form-data',\n            },\n        };\n        return axios.post(url, formData, config);\n    };\n\n    /**\n     * post given data to url with file\n     */\n    updateWithFile = (url: string, data: any) => {\n        const formData = new FormData();\n        for (const k in data) {\n            formData.append(k, data[k]);\n        }\n\n        const config: any = {\n            headers: {\n                ...axios.defaults.headers,\n                'content-type': 'multipart/form-data',\n            },\n        };\n        return axios.patch(url, formData, config);\n    };\n\n    isUserAuthenticated = () => {\n        const user = this.getLoggedInUser();\n\n        if (!user) {\n            return false;\n        }\n        const decoded: any = jwtDecode(user.token);\n        const currentTime = Date.now() / 1000;\n        if (decoded.exp < currentTime) {\n            console.warn('access token expired');\n            return false;\n        } else {\n            return true;\n        }\n    };\n\n    setLoggedInUser = (session: any) => {\n        if (session) sessionStorage.setItem(AUTH_SESSION_KEY, JSON.stringify(session));\n        else {\n            sessionStorage.removeItem(AUTH_SESSION_KEY);\n        }\n    };\n    /**\n     * Returns the logged in user\n     */\n    getLoggedInUser = () => {\n        return getUserFromCookie();\n    };\n\n    setUserInSession = (modifiedUser: any) => {\n        let userInfo = sessionStorage.getItem(AUTH_SESSION_KEY);\n        if (userInfo) {\n            const { token, user } = JSON.parse(userInfo);\n            this.setLoggedInUser({ token, ...user, ...modifiedUser });\n        }\n    };\n}\n\n/*\nCheck if token available in session\n*/\nlet user = getUserFromCookie();\nif (user) {\n    const { token } = user;\n    if (token) {\n        setAuthorization(token);\n    }\n}\n\nexport { APICore, setAuthorization };\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n// account\nfunction login(params: { email: string; password: string }) {\n    const baseUrl = '/login/';\n    return api.create(`${baseUrl}`, params);\n}\n\nfunction logout() {\n    const baseUrl = '/logout/';\n    return api.create(`${baseUrl}`, {});\n}\n\nfunction signup(params: { fullname: string; email: string; password: string }) {\n    const baseUrl = '/register/';\n    return api.create(`${baseUrl}`, params);\n}\n\nfunction forgotPassword(params: { email: string }) {\n    const baseUrl = '/forget-password/';\n    return api.create(`${baseUrl}`, params);\n}\n\nexport { login, logout, signup, forgotPassword };\n","import React from 'react'\r\nimport axios from 'axios'\r\n\r\nfunction  Mensaje(){\r\n  var myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n  \r\n  var raw = JSON.stringify({\r\n    \"das\": \"asd\"\r\n  });\r\n  \r\n  var requestOptions = {\r\n    mode:\"no-cors\",\r\n    method: 'POST',\r\n    headers: myHeaders,\r\n    body: raw,\r\n    redirect: 'follow'\r\n  };\r\n  \r\n  fetch(\"http://127.0.0.1:8000/POST/\", requestOptions)\r\n    .then(response => response.text())\r\n    .then(result => console.log(result))\r\n    .catch(error => console.log('error', error));\r\n\r\nreturn (\r\n\r\n<div>\r\n<h1>asd</h1>\r\n\r\n</div>\r\n\r\n)\r\n\r\n\r\n}\r\n\r\nexport default Mensaje;","import React from 'react';\nimport peticion from './peticion'\nimport Routes from './routes/Routes';\n\nimport { configureFakeBackend } from './helpers';\n\n// Themes\n\n// For Default import Default.scss\nimport './assets/scss/Default.scss';\nimport Mensaje from './peticion';\n// For Dark import Default-Dark.scss\n// import './assets/scss/Default-Dark.scss';\n\n// For Saas import Saas.scss\n// import './assets/scss/Saas.scss';\n// For Dark import Saas-Dark.scss\n// import './assets/scss/Saas-Dark.scss';\n\n// For Modern demo import Modern.scss\n// import './assets/scss/Modern.scss';\n// For Modern dark demo import Modern-Dark.scss\n// import './assets/scss/Modern-Dark.scss';\n\n// For Creative demo import Creative.scss\n// import './assets/scss/Creative.scss';\n// For Creative dark demo import Creative-Dark.scss\n// import './assets/scss/Creative-Dark.scss';\n\n// For Material demo import Material.scss\n// import './assets/scss/Material.scss';\n// For Material dark demo import Material-Dark.scss\n// import './assets/scss/Material-Dark.scss';\n\n// For Corporate demo import Corporate.scss\n// import './assets/scss/Corporate.scss';\n// For Corporate dark demo import Corporate-Dark.scss\n// import './assets/scss/Corporate-Dark.scss';\n\n// configure fake backend\nconfigureFakeBackend();\n\nconst App = () => {\n    return <Mensaje/>;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import i18n from 'i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\nimport translationEs from './locales/es/translation.json';\n\n//translations\nconst resources = {\n    es: {\n        translation: translationEs,\n    },\n};\n\ni18n.use(detector)\n    .use(initReactI18next) // passes i18n down to react-i18next\n    .init({\n        resources,\n        lng: 'en',\n        fallbackLng: 'en', // use en if detected lng is not available\n\n        keySeparator: false, // we do not use keys in form messages.welcome\n\n        interpolation: {\n            escapeValue: false, // react already safes from xss\n        },\n    });\n\nexport default i18n;\n","export enum AuthActionTypes {\n    API_RESPONSE_SUCCESS = '@@auth/API_RESPONSE_SUCCESS',\n    API_RESPONSE_ERROR = '@@auth/API_RESPONSE_ERROR',\n\n    LOGIN_USER = '@@auth/LOGIN_USER',\n    LOGOUT_USER = '@@auth/LOGOUT_USER',\n    SIGNUP_USER = '@@auth/SIGNUP_USER',\n    FORGOT_PASSWORD = '@@auth/FORGOT_PASSWORD',\n    FORGOT_PASSWORD_CHANGE = '@@auth/FORGOT_PASSWORD_CHANGE',\n\n    RESET = '@@auth/RESET',\n}\n","// apicore\nimport { APICore } from '../../helpers/api/apiCore';\n\n// constants\nimport { AuthActionTypes } from './constants';\n\nconst api = new APICore();\n\nconst INIT_STATE = {\n    user: api.getLoggedInUser(),\n    loading: false,\n};\n\ninterface UserData {\n    id: number;\n    email: string;\n    username: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n    token: string;\n}\n\ninterface AuthActionType {\n    type:\n        | AuthActionTypes.API_RESPONSE_SUCCESS\n        | AuthActionTypes.API_RESPONSE_ERROR\n        | AuthActionTypes.LOGIN_USER\n        | AuthActionTypes.LOGOUT_USER\n        | AuthActionTypes.RESET;\n    payload: {\n        actionType?: string;\n        data?: UserData | {};\n        error?: string;\n    };\n}\n\ninterface State {\n    user?: UserData | {};\n    loading?: boolean;\n    value?: boolean;\n}\n\nconst Auth = (state: State = INIT_STATE, action: AuthActionType): any => {\n    switch (action.type) {\n        case AuthActionTypes.API_RESPONSE_SUCCESS:\n            switch (action.payload.actionType) {\n                case AuthActionTypes.LOGIN_USER: {\n                    return {\n                        ...state,\n                        user: action.payload.data,\n                        userLoggedIn: true,\n                        loading: false,\n                    };\n                }\n                case AuthActionTypes.SIGNUP_USER: {\n                    return {\n                        ...state,\n                        loading: false,\n                        userSignUp: true,\n                    };\n                }\n                case AuthActionTypes.LOGOUT_USER: {\n                    return {\n                        ...state,\n                        user: null,\n                        loading: false,\n                        userLogout: true,\n                    };\n                }\n                case AuthActionTypes.FORGOT_PASSWORD: {\n                    return {\n                        ...state,\n                        resetPasswordSuccess: action.payload.data,\n                        loading: false,\n                        passwordReset: true,\n                    };\n                }\n                default:\n                    return { ...state };\n            }\n\n        case AuthActionTypes.API_RESPONSE_ERROR:\n            switch (action.payload.actionType) {\n                case AuthActionTypes.LOGIN_USER: {\n                    return {\n                        ...state,\n                        error: action.payload.error,\n                        userLoggedIn: false,\n                        loading: false,\n                    };\n                }\n                case AuthActionTypes.SIGNUP_USER: {\n                    return {\n                        ...state,\n                        registerError: action.payload.error,\n                        userSignUp: false,\n                        loading: false,\n                    };\n                }\n                case AuthActionTypes.FORGOT_PASSWORD: {\n                    return {\n                        ...state,\n                        error: action.payload.error,\n                        loading: false,\n                        passwordReset: false,\n                    };\n                }\n                default:\n                    return { ...state };\n            }\n\n        case AuthActionTypes.LOGIN_USER:\n            return { ...state, loading: true, userLoggedIn: false };\n        case AuthActionTypes.LOGOUT_USER:\n            return { ...state, loading: true, userLogout: false };\n        case AuthActionTypes.RESET:\n            return {\n                ...state,\n                loading: false,\n                error: false,\n                userSignUp: false,\n                userLoggedIn: false,\n                passwordReset: false,\n                passwordChange: false,\n                resetPasswordSuccess: null,\n            };\n        default:\n            return { ...state };\n    }\n};\n\nexport default Auth;\n","// constants\nimport {\n    LayoutTypes,\n    LayoutWidth,\n    MenuPositions,\n    SideBarTheme,\n    SideBarTypes,\n    TopbarTheme,\n} from '../../constants/layout';\n\nenum LayoutActionTypes {\n    CHANGE_LAYOUT = '@@layout/CHANGE_LAYOUT',\n    CHANGE_LAYOUT_WIDTH = '@@layout/CHANGE_LAYOUT_WIDTH',\n    CHANGE_MENU_POSITIONS = '@@layout/CHANGE_MENU_POSITIONS',\n    CHANGE_SIDEBAR_THEME = '@@layout/CHANGE_SIDEBAR_THEME',\n    CHANGE_SIDEBAR_TYPE = '@@layout/CHANGE_SIDEBAR_TYPE',\n    TOGGLE_SIDEBAR_USER_INFO = '@@layout/TOGGLE_SIDEBAR_USER_INFO',\n    CHANGE_TOPBAR_THEME = '@@layout/CHANGE_TOPBAR_THEME',\n\n    TOGGLE_TWO_TONE_ICONS = '@@layout/TOGGLE_TWO_TONE_ICONS',\n    SHOW_RIGHT_SIDEBAR = '@@layout/SHOW_RIGHT_SIDEBAR',\n    HIDE_RIGHT_SIDEBAR = '@@layout/HIDE_RIGHT_SIDEBAR',\n}\n\nexport interface LayoutStateTypes {\n    layoutType:\n        | LayoutTypes.LAYOUT_VERTICAL\n        | LayoutTypes.LAYOUT_TWO_COLUMN\n        | LayoutTypes.LAYOUT_DETACHED\n        | LayoutTypes.LAYOUT_HORIZONTAL;\n    layoutWidth: LayoutWidth.LAYOUT_WIDTH_FLUID | LayoutWidth.LAYOUT_WIDTH_BOXED;\n    menuPosition: MenuPositions.MENU_POSITION_FIXED | MenuPositions.MENU_POSITION_SCROLLABLE;\n    leftSideBarTheme:\n        | SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT\n        | SideBarTheme.LEFT_SIDEBAR_THEME_DARK\n        | SideBarTheme.LEFT_SIDEBAR_THEME_BRAND\n        | SideBarTheme.LEFT_SIDEBAR_THEME_GRADIENT;\n    leftSideBarType:\n        | SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT\n        | SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED\n        | SideBarTypes.LEFT_SIDEBAR_TYPE_COMPACT;\n    showSidebarUserInfo: boolean;\n    topbarTheme: TopbarTheme.TOPBAR_THEME_LIGHT | TopbarTheme.TOPBAR_THEME_DARK;\n    isOpenRightSideBar: boolean;\n}\n\nexport { LayoutActionTypes };\n","/* Layout types and other constants */\n\nexport enum LayoutTypes {\n    LAYOUT_VERTICAL = 'vertical',\n    LAYOUT_HORIZONTAL = 'horizontal',\n    LAYOUT_DETACHED = 'detached',\n    LAYOUT_TWO_COLUMN = 'two-column',\n}\n\nexport enum LayoutWidth {\n    LAYOUT_WIDTH_FLUID = 'fluid',\n    LAYOUT_WIDTH_BOXED = 'boxed',\n}\n\nexport enum MenuPositions {\n    MENU_POSITION_FIXED = 'fixed',\n    MENU_POSITION_SCROLLABLE = 'scrollable',\n}\n\nexport enum SideBarTheme {\n    LEFT_SIDEBAR_THEME_LIGHT = 'light',\n    LEFT_SIDEBAR_THEME_DARK = 'dark',\n    LEFT_SIDEBAR_THEME_BRAND = 'brand',\n    LEFT_SIDEBAR_THEME_GRADIENT = 'gradient',\n}\n\nexport enum SideBarTypes {\n    LEFT_SIDEBAR_TYPE_DEFAULT = 'default',\n    LEFT_SIDEBAR_TYPE_CONDENSED = 'condensed',\n    LEFT_SIDEBAR_TYPE_COMPACT = 'compact',\n}\n\nexport enum TopbarTheme {\n    TOPBAR_THEME_LIGHT = 'light',\n    TOPBAR_THEME_DARK = 'dark',\n}\n","const groupByFields = (array: Array<any>, f: any): Array<any> => {\n    /*\n    params description :\n        f : function which returnf the array of fields \n        e.g. :  (item) => {\n            return [itemField1, itemField2];\n        }\n        array : array of data to group e.g. : [{...}, {...}]       \n    */\n    var groups: { [key: string]: any[] } = {};\n    array.forEach((o) => {\n        var group = JSON.stringify(f(o));\n        groups[group] = groups[group] || [];\n        groups[group].push(o);\n    });\n\n    return Object.keys(groups).map((group) => {\n        return groups[group];\n    });\n};\n\n/**\n * split array into chunks\n * @param array - array to split\n * @param chunkSize - chunk size\n * @returns\n */\nconst splitArray = (array: Array<any>, chunkSize: number) => {\n    const chunks = Array(Math.ceil(array.length / chunkSize))\n        .fill(1)\n        .map((_, index) => index * chunkSize)\n        .map((begin) => array.slice(begin, begin + chunkSize));\n    return chunks;\n};\n\nexport { groupByFields, splitArray };\n","// app constants\nimport { SideBarTypes, LayoutWidth } from '../constants';\n\ninterface ConfigTypes {\n    leftSideBarType:\n        | SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT\n        | SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED\n        | SideBarTypes.LEFT_SIDEBAR_TYPE_COMPACT;\n}\n\nconst getLayoutConfigs = (layoutWidth: string | boolean | null) => {\n    // add property to change in particular layoutWidth\n    let config: ConfigTypes = {\n        leftSideBarType: SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT,\n    };\n\n    switch (layoutWidth) {\n        case LayoutWidth.LAYOUT_WIDTH_FLUID:\n            config.leftSideBarType = SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT;\n            break;\n        case LayoutWidth.LAYOUT_WIDTH_BOXED:\n            config.leftSideBarType = SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED;\n            break;\n        default:\n            return config;\n    }\n    return config;\n};\n\n/**\n * Changes the body attribute\n */\nconst changeBodyAttribute = (attribute: string, value: string): void => {\n    if (document.body) document.body.setAttribute(attribute, value);\n};\n\nexport { getLayoutConfigs, changeBodyAttribute };\n","// action constants\nimport { LayoutActionTypes, LayoutStateTypes } from './constants';\n\n// app constants\nimport {\n    LayoutTypes,\n    LayoutWidth,\n    MenuPositions,\n    SideBarTheme,\n    SideBarTypes,\n    TopbarTheme,\n} from '../../constants/layout';\n\n// actions\nimport { LayoutActionType } from './actions';\n\n// utils\nimport { getLayoutConfigs } from '../../utils';\n\nconst INIT_STATE = {\n    layoutType: LayoutTypes.LAYOUT_VERTICAL,\n    layoutWidth: LayoutWidth.LAYOUT_WIDTH_FLUID,\n    menuPosition: MenuPositions.MENU_POSITION_FIXED,\n    leftSideBarTheme: SideBarTheme.LEFT_SIDEBAR_THEME_DARK,\n    leftSideBarType: SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT,\n    showSidebarUserInfo: false,\n    topbarTheme: TopbarTheme.TOPBAR_THEME_LIGHT,\n    isOpenRightSideBar: false,\n};\n\nconst Layout = (state: LayoutStateTypes = INIT_STATE, action: LayoutActionType<string | boolean | null>) => {\n    switch (action.type) {\n        case LayoutActionTypes.CHANGE_LAYOUT:\n            return {\n                ...state,\n                layoutType: action.payload,\n            };\n        case LayoutActionTypes.CHANGE_LAYOUT_WIDTH:\n            const layoutConfig = getLayoutConfigs(action.payload! && action.payload);\n            return {\n                ...state,\n                layoutWidth: action.payload,\n                ...layoutConfig,\n            };\n        case LayoutActionTypes.CHANGE_MENU_POSITIONS:\n            return {\n                ...state,\n                menuPosition: action.payload,\n            };\n        case LayoutActionTypes.CHANGE_SIDEBAR_THEME:\n            return {\n                ...state,\n                leftSideBarTheme: action.payload,\n            };\n        case LayoutActionTypes.CHANGE_SIDEBAR_TYPE:\n            return {\n                ...state,\n                leftSideBarType: action.payload,\n            };\n        case LayoutActionTypes.TOGGLE_SIDEBAR_USER_INFO:\n            return {\n                ...state,\n                showSidebarUserInfo: action.payload,\n            };\n        case LayoutActionTypes.CHANGE_TOPBAR_THEME:\n            return {\n                ...state,\n                topbarTheme: action.payload,\n            };\n        case LayoutActionTypes.SHOW_RIGHT_SIDEBAR:\n            return {\n                ...state,\n                isOpenRightSideBar: true,\n            };\n        case LayoutActionTypes.HIDE_RIGHT_SIDEBAR:\n            return {\n                ...state,\n                isOpenRightSideBar: false,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default Layout;\n","import { combineReducers } from 'redux';\n\nimport Auth from './auth/reducers';\nimport Layout from './layout/reducers';\n\nexport default combineReducers({\n    Auth,\n    Layout,\n});\n","// constants\nimport { AuthActionTypes } from './constants';\n\nexport interface AuthActionType {\n    type:\n        | AuthActionTypes.API_RESPONSE_SUCCESS\n        | AuthActionTypes.API_RESPONSE_ERROR\n        | AuthActionTypes.FORGOT_PASSWORD\n        | AuthActionTypes.FORGOT_PASSWORD_CHANGE\n        | AuthActionTypes.LOGIN_USER\n        | AuthActionTypes.LOGOUT_USER\n        | AuthActionTypes.RESET\n        | AuthActionTypes.SIGNUP_USER;\n    payload: {} | string;\n}\n\ninterface UserData {\n    id: number;\n    email: string;\n    username: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n    token: string;\n}\n\n// common success\nexport const authApiResponseSuccess = (actionType: string, data: UserData | {}): AuthActionType => ({\n    type: AuthActionTypes.API_RESPONSE_SUCCESS,\n    payload: { actionType, data },\n});\n// common error\nexport const authApiResponseError = (actionType: string, error: string): AuthActionType => ({\n    type: AuthActionTypes.API_RESPONSE_ERROR,\n    payload: { actionType, error },\n});\n\nexport const loginUser = (email: string, password: string): AuthActionType => ({\n    type: AuthActionTypes.LOGIN_USER,\n    payload: { email, password },\n});\n\nexport const logoutUser = (): AuthActionType => ({\n    type: AuthActionTypes.LOGOUT_USER,\n    payload: {},\n});\n\nexport const signupUser = (fullname: string, email: string, password: string): AuthActionType => ({\n    type: AuthActionTypes.SIGNUP_USER,\n    payload: { fullname, email, password },\n});\n\nexport const forgotPassword = (email: string): AuthActionType => ({\n    type: AuthActionTypes.FORGOT_PASSWORD,\n    payload: { email },\n});\n\nexport const resetAuth = (): AuthActionType => ({\n    type: AuthActionTypes.RESET,\n    payload: {},\n});\n","import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\n// apicore\nimport { APICore, setAuthorization } from '../../helpers/api/apiCore';\n\n// helpers\nimport {\n    login as loginApi,\n    logout as logoutApi,\n    signup as signupApi,\n    forgotPassword as forgotPasswordApi,\n} from '../../helpers/';\n\n// actions\nimport { authApiResponseSuccess, authApiResponseError } from './actions';\n\n// constants\nimport { AuthActionTypes } from './constants';\n\ninterface UserData {\n    payload: {\n        username: string;\n        password: string;\n        fullname: string;\n        email: string;\n    };\n    type: string;\n}\n\nconst api = new APICore();\n\n/**\n * Login the user\n * @param {*} payload - username and password\n */\nfunction* login({ payload: { email, password }, type }: UserData): SagaIterator {\n    try {\n        const response = yield call(loginApi, { email, password });\n        const user = response.data;\n        // NOTE - You can change this according to response format from your api\n        api.setLoggedInUser(user);\n        setAuthorization(user['token']);\n        yield put(authApiResponseSuccess(AuthActionTypes.LOGIN_USER, user));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.LOGIN_USER, error));\n        api.setLoggedInUser(null);\n        setAuthorization(null);\n    }\n}\n\n/**\n * Logout the user\n */\nfunction* logout(): SagaIterator {\n    try {\n        yield call(logoutApi);\n        api.setLoggedInUser(null);\n        setAuthorization(null);\n        yield put(authApiResponseSuccess(AuthActionTypes.LOGOUT_USER, {}));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.LOGOUT_USER, error));\n    }\n}\n\nfunction* signup({ payload: { fullname, email, password } }: UserData): SagaIterator {\n    try {\n        const response = yield call(signupApi, { fullname, email, password });\n        const user = response.data;\n        // api.setLoggedInUser(user);\n        // setAuthorization(user['token']);\n        yield put(authApiResponseSuccess(AuthActionTypes.SIGNUP_USER, user));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.SIGNUP_USER, error));\n        api.setLoggedInUser(null);\n        setAuthorization(null);\n    }\n}\n\nfunction* forgotPassword({ payload: { email } }: UserData): SagaIterator {\n    try {\n        const response = yield call(forgotPasswordApi, { email });\n        yield put(authApiResponseSuccess(AuthActionTypes.FORGOT_PASSWORD, response.data));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.FORGOT_PASSWORD, error));\n    }\n}\nexport function* watchLoginUser() {\n    yield takeEvery(AuthActionTypes.LOGIN_USER, login);\n}\n\nexport function* watchLogout() {\n    yield takeEvery(AuthActionTypes.LOGOUT_USER, logout);\n}\n\nexport function* watchSignup(): any {\n    yield takeEvery(AuthActionTypes.SIGNUP_USER, signup);\n}\n\nexport function* watchForgotPassword(): any {\n    yield takeEvery(AuthActionTypes.FORGOT_PASSWORD, forgotPassword);\n}\n\nfunction* authSaga() {\n    yield all([fork(watchLoginUser), fork(watchLogout), fork(watchSignup), fork(watchForgotPassword)]);\n}\n\nexport default authSaga;\n","import { all, call, fork, takeEvery } from 'redux-saga/effects';\n\n// constants\nimport { LayoutActionTypes } from './constants';\n\n/**\n * Toggle the class on body\n * @param {*} cssClass\n */\nfunction manageBodyClass(cssClass: string, action = 'toggle') {\n    switch (action) {\n        case 'add':\n            if (document.body) document.body.classList.add(cssClass);\n            break;\n        case 'remove':\n            if (document.body) document.body.classList.remove(cssClass);\n            break;\n        default:\n            if (document.body) document.body.classList.toggle(cssClass);\n            break;\n    }\n\n    return true;\n}\n\n/**\n * ---------------------------------------------------------------------------------------------------------------------------\n * Note: Following are the functions which allows you to save the user prefrences on backend side by making an api request.\n * For now, we are just applying the required logic on frontend side\n * ----------------------------------------------------------------------------------------------------------------------------\n */\n\n/**\n * Show the rightsidebar\n */\nfunction* showRightSidebar() {\n    try {\n        yield call(manageBodyClass, 'right-bar-enabled', 'add');\n    } catch (error) {}\n}\n\n/**\n * Hides the rightsidebar\n */\nfunction* hideRightSidebar() {\n    try {\n        yield call(manageBodyClass, 'right-bar-enabled', 'remove');\n    } catch (error) {}\n}\n\nexport function* watchShowRightSidebar(): any {\n    yield takeEvery(LayoutActionTypes.SHOW_RIGHT_SIDEBAR, showRightSidebar);\n}\n\nexport function* watchHideRightSidebar(): any {\n    yield takeEvery(LayoutActionTypes.HIDE_RIGHT_SIDEBAR, hideRightSidebar);\n}\n\nfunction* LayoutSaga(): any {\n    yield all([fork(watchShowRightSidebar), fork(watchHideRightSidebar)]);\n}\n\nexport default LayoutSaga;\n","import { all } from 'redux-saga/effects';\n\nimport authSaga from './auth/saga';\nimport layoutSaga from './layout/saga';\n\nexport default function* rootSaga() {\n    yield all([authSaga(), layoutSaga()]);\n}\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from './reducers';\nimport rootSaga from './sagas';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\nlet store: any;\n\nexport function configureStore(initialState: {}) {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n    const localstore = createStore(reducers, initialState, composeEnhancers(applyMiddleware(...middlewares)));\n    sagaMiddleware.run(rootSaga);\n    store = localstore;\n    return localstore;\n}\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './i18n';\n\nimport { Provider } from 'react-redux';\nimport { configureStore } from './redux/store';\n\nReactDOM.render(\n    <Provider store={configureStore({})}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}